--- a/host_applications/linux/apps/hello_pi/hello_teapot/models.c
+++ b/host_applications/linux/apps/hello_pi/hello_teapot/models.c
@@ -76,7 +76,7 @@ static void create_vbo(GLenum type, GLui
    vc_assert(*vbo);
    glBindBuffer(type, *vbo);
    glBufferData(type, size, data, GL_STATIC_DRAW);
-   glBindBuffer(type, 0);     
+   glBindBuffer(type, 0);
 }
 
 
@@ -174,14 +174,14 @@ int draw_wavefront(MODEL_T m, GLuint tex
          glBindBuffer(GL_ARRAY_BUFFER, mat->vbo[VBO_VERTEX]);
          glVertexPointer(3, GL_FLOAT, 0, NULL);
       }
-      if (mat->vbo[VBO_NORMAL]) {   
+      if (mat->vbo[VBO_NORMAL]) {
          glEnableClientState(GL_NORMAL_ARRAY);
          glBindBuffer(GL_ARRAY_BUFFER, mat->vbo[VBO_NORMAL]);
          glNormalPointer(GL_FLOAT, 0, NULL);
       } else {
          glDisableClientState(GL_NORMAL_ARRAY);
       }
-      if (mat->vbo[VBO_TEXTURE]) {   
+      if (mat->vbo[VBO_TEXTURE]) {
          glEnableClientState(GL_TEXTURE_COORD_ARRAY);
          glBindBuffer(GL_ARRAY_BUFFER, mat->vbo[VBO_TEXTURE]);
          glTexCoordPointer(2, GL_FLOAT, 0, NULL);
@@ -223,7 +223,7 @@ static int load_wavefront_obj(const char
 
    while (valid > 0) {
       char *s, *end = line;
-      
+
       while((end-line < valid) && *end != '\n' && *end != '\r')
          end++;
       *end++ = 0;
@@ -239,7 +239,7 @@ static int load_wavefront_obj(const char
       case '\r': case '\n': case '\0': break; // blank line
       case 'm': vc_assert(strncmp(s, "mtllib", sizeof "mtllib"-1)==0); break;
       case 'o': break;
-      case 'u': 
+      case 'u':
          if (sscanf(s, "usemtl %s", /*MAX_MATERIAL_NAME-1, */model->material[m->num_materials].name) == 1) {
             if (m->num_materials < MAX_MATERIALS) {
                if (m->num_materials > 0 && ((pf-qf)/3 == m->material_index[m->num_materials-1] || strcmp(model->material[m->num_materials-1].name, model->material[m->num_materials].name)==0)) {
@@ -249,7 +249,7 @@ static int load_wavefront_obj(const char
                m->material_index[m->num_materials] = (pf-qf)/3;
                m->num_materials++;
             }
-         } else { printf(s); vc_assert(0); }
+         } else { printf("%s", s); vc_assert(0); }
          break;
       case 'g': vc_assert(strncmp(s, "g ", sizeof "g "-1)==0); break;
       case 's': vc_assert(strncmp(s, "s ", sizeof "s "-1)==0); break;
@@ -263,8 +263,8 @@ static int load_wavefront_obj(const char
          } else if (i = sscanf(s, "f"" %hu//%hu %hu//%hu %hu//%hu %hu//%hu %hu//%hu %hu//%hu"
                                      " %hu//%hu %hu//%hu %hu//%hu %hu//%hu %hu//%hu %hu//%hu"
                                      " %hu//%hu %hu//%hu %hu//%hu %hu//%hu %hu//%hu %hu//%hu %hu",
-               pp+ 0, pp+ 1, pp+ 2, pp+ 3, pp+ 4, pp+ 5, pp+ 6, pp+ 7, pp+ 8, pp+ 9, pp+10, pp+11, 
-               pp+12, pp+13, pp+14, pp+15, pp+16, pp+17, pp+18, pp+19, pp+20, pp+21, pp+22, pp+23, 
+               pp+ 0, pp+ 1, pp+ 2, pp+ 3, pp+ 4, pp+ 5, pp+ 6, pp+ 7, pp+ 8, pp+ 9, pp+10, pp+11,
+               pp+12, pp+13, pp+14, pp+15, pp+16, pp+17, pp+18, pp+19, pp+20, pp+21, pp+22, pp+23,
                pp+24, pp+25, pp+26, pp+27, pp+28, pp+29, pp+30, pp+32, pp+32, pp+33, pp+34, pp+35, pp+36), i >= 6) {
             int poly = i/2;
             //vc_assert(i < countof(pp)); // may need to increment poly count and pp array
@@ -276,8 +276,8 @@ static int load_wavefront_obj(const char
          } else if (i = sscanf(s, "f"" %hu/%hu %hu/%hu %hu/%hu %hu/%hu %hu/%hu %hu/%hu"
                                      " %hu/%hu %hu/%hu %hu/%hu %hu/%hu %hu/%hu %hu/%hu"
                                      " %hu/%hu %hu/%hu %hu/%hu %hu/%hu %hu/%hu %hu/%hu %hu",
-               pp+ 0, pp+ 1, pp+ 2, pp+ 3, pp+ 4, pp+ 5, pp+ 6, pp+ 7, pp+ 8, pp+ 9, pp+10, pp+11, 
-               pp+12, pp+13, pp+14, pp+15, pp+16, pp+17, pp+18, pp+19, pp+20, pp+21, pp+22, pp+23, 
+               pp+ 0, pp+ 1, pp+ 2, pp+ 3, pp+ 4, pp+ 5, pp+ 6, pp+ 7, pp+ 8, pp+ 9, pp+10, pp+11,
+               pp+12, pp+13, pp+14, pp+15, pp+16, pp+17, pp+18, pp+19, pp+20, pp+21, pp+22, pp+23,
                pp+24, pp+25, pp+26, pp+27, pp+28, pp+29, pp+30, pp+32, pp+32, pp+33, pp+34, pp+35, pp+36), i >= 6) {
             int poly = i/2;
             //vc_assert(i < countof(pp); // may need to increment poly count and pp array
@@ -289,8 +289,8 @@ static int load_wavefront_obj(const char
          } else if (i = sscanf(s, "f"" %hu/%hu/%hu %hu/%hu/%hu %hu/%hu/%hu %hu/%hu/%hu %hu/%hu/%hu %hu/%hu/%hu"
                                      " %hu/%hu/%hu %hu/%hu/%hu %hu/%hu/%hu %hu/%hu/%hu %hu/%hu/%hu %hu/%hu/%hu"
                                      " %hu/%hu/%hu %hu/%hu/%hu %hu/%hu/%hu %hu/%hu/%hu %hu/%hu/%hu %hu/%hu/%hu %hu",
-               pp+ 0, pp+ 1, pp+ 2, pp+ 3, pp+ 4, pp+ 5, pp+ 6, pp+ 7, pp+ 8, pp+ 9, pp+10, pp+11, pp+12, pp+13, pp+14, pp+15, pp+16, pp+17, 
-               pp+18, pp+19, pp+20, pp+21, pp+22, pp+23, pp+24, pp+25, pp+26, pp+27, pp+28, pp+29, pp+30, pp+32, pp+32, pp+33, pp+34, pp+35, 
+               pp+ 0, pp+ 1, pp+ 2, pp+ 3, pp+ 4, pp+ 5, pp+ 6, pp+ 7, pp+ 8, pp+ 9, pp+10, pp+11, pp+12, pp+13, pp+14, pp+15, pp+16, pp+17,
+               pp+18, pp+19, pp+20, pp+21, pp+22, pp+23, pp+24, pp+25, pp+26, pp+27, pp+28, pp+29, pp+30, pp+32, pp+32, pp+33, pp+34, pp+35,
                pp+36, pp+37, pp+38, pp+39, pp+40, pp+41, pp+42, pp+43, pp+44, pp+45, pp+46, pp+47, pp+48, pp+49, pp+50, pp+51, pp+52, pp+53, pp+54), i >= 9) {
             int poly = i/3;
             //vc_assert(i < countof(pp); // may need to increment poly count and pp array
@@ -299,9 +299,9 @@ static int load_wavefront_obj(const char
                *pf++ = pp[3*i+0]; *pf++ = pp[3*i+1]; *pf++ = pp[3*i+2];
                *pf++ = pp[3*(i+1)+0]; *pf++ = pp[3*(i+1)+1]; *pf++ = pp[3*(i+1)+2];
             }
-         } else { printf(s); vc_assert(0); }
+         } else { printf("%s", s); vc_assert(0); }
          break;
-      default: 
+      default:
          printf("%02x %02x %s", s[0], s[1], s); vc_assert(0); break;
       }
 
@@ -339,7 +339,7 @@ static int load_wavefront_dat(const char
 {
    FILE *fp;
    int s;
-   const int size = sizeof *m + 
+   const int size = sizeof *m +
       sizeof(float)*(3+2+3)*MAX_VERTICES +   // 3 vertices + 2 textures + 3 normals
       sizeof(unsigned short)*3*MAX_VERTICES; //each face has 9 vertices
 
@@ -365,7 +365,7 @@ MODEL_T load_wavefront(const char *model
    if (!model || !modelname) return NULL;
    memset (model, 0, sizeof *model);
    model->texture = 0; //load_texture(texturename);
-   m = allocbuffer(sizeof *m + 
+   m = allocbuffer(sizeof *m +
       sizeof(float)*(3+2+3)*MAX_VERTICES +    // 3 vertices + 2 textures + 3 normals
       sizeof(unsigned short)*3*MAX_VERTICES); //each face has 9 vertices
    if (!m) return 0;
@@ -385,7 +385,7 @@ MODEL_T load_wavefront(const char *model
       #ifdef DUMP_OBJ_DAT
       strcpy(modelname_obj, modelname);
       strcat(modelname_obj, ".dat");
-      size = sizeof *m + 
+      size = sizeof *m +
          sizeof(float)*(3*m->numv+2*m->numt+3*m->numn) +  // 3 vertices + 2 textures + 3 normals
          sizeof(unsigned short)*3*m->numf;                //each face has 9 vertices
       fp = host_file_open(modelname_obj, "w");
@@ -412,10 +412,10 @@ MODEL_T load_wavefront(const char *model
       // vertex, texture, normal
       deindex(temp, qv, qf+3*offset+0, 3, mat->numverts);
       create_vbo(GL_ARRAY_BUFFER, mat->vbo+VBO_VERTEX, 3 * mat->numverts * sizeof *qv, temp); // 3
-   
+
       deindex(temp, qt, qf+3*offset+1, 2, mat->numverts);
       create_vbo(GL_ARRAY_BUFFER, mat->vbo+VBO_TEXTURE, 2 * mat->numverts * sizeof *qt, temp); // 2
-   
+
       deindex(temp, qn, qf+3*offset+2, 3, mat->numverts);
       create_vbo(GL_ARRAY_BUFFER, mat->vbo+VBO_NORMAL, 3 * mat->numverts * sizeof *qn, temp); // 3
       offset += mat->numverts;
@@ -443,7 +443,7 @@ void unload_wavefront(MODEL_T m)
    }
 }
 
-// create a cube model that looks like a wavefront model, 
+// create a cube model that looks like a wavefront model,
 MODEL_T cube_wavefront(void)
 {
    static const float qv[] = {
@@ -456,7 +456,7 @@ MODEL_T cube_wavefront(void)
      0.5f,  0.5f, -0.5f,
     -0.5f,  0.5f, -0.5f,
    };
-   
+
    static const float qn[] = {
      0.0f, -1.0f, -0.0f,
      0.0f,  1.0f, -0.0f,
@@ -465,14 +465,14 @@ MODEL_T cube_wavefront(void)
      0.0f,  0.0f, -1.0f,
     -1.0f,  0.0f, -0.0f,
    };
-   
+
    static const float qt[] = {
     1.0f, 0.0f,
     1.0f, 1.0f,
     0.0f, 1.0f,
     0.0f, 0.0f,
    };
-   
+
    static const unsigned short qf[] = {
     1,1,1, 2,2,1, 3,3,1,
     3,3,1, 4,4,1, 1,1,1,
--- a/host_applications/linux/apps/raspicam/gl_scenes/models.c
+++ b/host_applications/linux/apps/raspicam/gl_scenes/models.c
@@ -77,7 +77,7 @@ static void create_vbo(GLenum type, GLui
    vc_assert(*vbo);
    glBindBuffer(type, *vbo);
    glBufferData(type, size, data, GL_STATIC_DRAW);
-   glBindBuffer(type, 0);     
+   glBindBuffer(type, 0);
 }
 
 
@@ -180,14 +180,14 @@ int draw_wavefront(MODEL_T m, GLuint tex
          glBindBuffer(GL_ARRAY_BUFFER, mat->vbo[VBO_VERTEX]);
          glVertexPointer(3, GL_FLOAT, 0, NULL);
       }
-      if (mat->vbo[VBO_NORMAL]) {   
+      if (mat->vbo[VBO_NORMAL]) {
          glEnableClientState(GL_NORMAL_ARRAY);
          glBindBuffer(GL_ARRAY_BUFFER, mat->vbo[VBO_NORMAL]);
          glNormalPointer(GL_FLOAT, 0, NULL);
       } else {
          glDisableClientState(GL_NORMAL_ARRAY);
       }
-      if (mat->vbo[VBO_TEXTURE]) {   
+      if (mat->vbo[VBO_TEXTURE]) {
          glEnableClientState(GL_TEXTURE_COORD_ARRAY);
          glBindBuffer(GL_ARRAY_BUFFER, mat->vbo[VBO_TEXTURE]);
          glTexCoordPointer(2, GL_FLOAT, 0, NULL);
@@ -229,7 +229,7 @@ static int load_wavefront_obj(const char
 
    while (valid > 0) {
       char *s, *end = line;
-      
+
       while((end-line < valid) && *end != '\n' && *end != '\r')
          end++;
       *end++ = 0;
@@ -245,7 +245,7 @@ static int load_wavefront_obj(const char
       case '\r': case '\n': case '\0': break; // blank line
       case 'm': vc_assert(strncmp(s, "mtllib", sizeof "mtllib"-1)==0); break;
       case 'o': break;
-      case 'u': 
+      case 'u':
          if (sscanf(s, "usemtl %s", /*MAX_MATERIAL_NAME-1, */model->material[m->num_materials].name) == 1) {
             if (m->num_materials < MAX_MATERIALS) {
                if (m->num_materials > 0 && ((pf-qf)/3 == m->material_index[m->num_materials-1] || strcmp(model->material[m->num_materials-1].name, model->material[m->num_materials].name)==0)) {
@@ -255,7 +255,7 @@ static int load_wavefront_obj(const char
                m->material_index[m->num_materials] = (pf-qf)/3;
                m->num_materials++;
             }
-         } else { printf(s); vc_assert(0); }
+         } else { printf("%s", s); vc_assert(0); }
          break;
       case 'g': vc_assert(strncmp(s, "g ", sizeof "g "-1)==0); break;
       case 's': vc_assert(strncmp(s, "s ", sizeof "s "-1)==0); break;
@@ -269,8 +269,8 @@ static int load_wavefront_obj(const char
          } else if (i = sscanf(s, "f"" %hu//%hu %hu//%hu %hu//%hu %hu//%hu %hu//%hu %hu//%hu"
                                      " %hu//%hu %hu//%hu %hu//%hu %hu//%hu %hu//%hu %hu//%hu"
                                      " %hu//%hu %hu//%hu %hu//%hu %hu//%hu %hu//%hu %hu//%hu %hu",
-               pp+ 0, pp+ 1, pp+ 2, pp+ 3, pp+ 4, pp+ 5, pp+ 6, pp+ 7, pp+ 8, pp+ 9, pp+10, pp+11, 
-               pp+12, pp+13, pp+14, pp+15, pp+16, pp+17, pp+18, pp+19, pp+20, pp+21, pp+22, pp+23, 
+               pp+ 0, pp+ 1, pp+ 2, pp+ 3, pp+ 4, pp+ 5, pp+ 6, pp+ 7, pp+ 8, pp+ 9, pp+10, pp+11,
+               pp+12, pp+13, pp+14, pp+15, pp+16, pp+17, pp+18, pp+19, pp+20, pp+21, pp+22, pp+23,
                pp+24, pp+25, pp+26, pp+27, pp+28, pp+29, pp+30, pp+32, pp+32, pp+33, pp+34, pp+35, pp+36), i >= 6) {
             int poly = i/2;
             //vc_assert(i < countof(pp)); // may need to increment poly count and pp array
@@ -282,8 +282,8 @@ static int load_wavefront_obj(const char
          } else if (i = sscanf(s, "f"" %hu/%hu %hu/%hu %hu/%hu %hu/%hu %hu/%hu %hu/%hu"
                                      " %hu/%hu %hu/%hu %hu/%hu %hu/%hu %hu/%hu %hu/%hu"
                                      " %hu/%hu %hu/%hu %hu/%hu %hu/%hu %hu/%hu %hu/%hu %hu",
-               pp+ 0, pp+ 1, pp+ 2, pp+ 3, pp+ 4, pp+ 5, pp+ 6, pp+ 7, pp+ 8, pp+ 9, pp+10, pp+11, 
-               pp+12, pp+13, pp+14, pp+15, pp+16, pp+17, pp+18, pp+19, pp+20, pp+21, pp+22, pp+23, 
+               pp+ 0, pp+ 1, pp+ 2, pp+ 3, pp+ 4, pp+ 5, pp+ 6, pp+ 7, pp+ 8, pp+ 9, pp+10, pp+11,
+               pp+12, pp+13, pp+14, pp+15, pp+16, pp+17, pp+18, pp+19, pp+20, pp+21, pp+22, pp+23,
                pp+24, pp+25, pp+26, pp+27, pp+28, pp+29, pp+30, pp+32, pp+32, pp+33, pp+34, pp+35, pp+36), i >= 6) {
             int poly = i/2;
             //vc_assert(i < countof(pp); // may need to increment poly count and pp array
@@ -295,8 +295,8 @@ static int load_wavefront_obj(const char
          } else if (i = sscanf(s, "f"" %hu/%hu/%hu %hu/%hu/%hu %hu/%hu/%hu %hu/%hu/%hu %hu/%hu/%hu %hu/%hu/%hu"
                                      " %hu/%hu/%hu %hu/%hu/%hu %hu/%hu/%hu %hu/%hu/%hu %hu/%hu/%hu %hu/%hu/%hu"
                                      " %hu/%hu/%hu %hu/%hu/%hu %hu/%hu/%hu %hu/%hu/%hu %hu/%hu/%hu %hu/%hu/%hu %hu",
-               pp+ 0, pp+ 1, pp+ 2, pp+ 3, pp+ 4, pp+ 5, pp+ 6, pp+ 7, pp+ 8, pp+ 9, pp+10, pp+11, pp+12, pp+13, pp+14, pp+15, pp+16, pp+17, 
-               pp+18, pp+19, pp+20, pp+21, pp+22, pp+23, pp+24, pp+25, pp+26, pp+27, pp+28, pp+29, pp+30, pp+32, pp+32, pp+33, pp+34, pp+35, 
+               pp+ 0, pp+ 1, pp+ 2, pp+ 3, pp+ 4, pp+ 5, pp+ 6, pp+ 7, pp+ 8, pp+ 9, pp+10, pp+11, pp+12, pp+13, pp+14, pp+15, pp+16, pp+17,
+               pp+18, pp+19, pp+20, pp+21, pp+22, pp+23, pp+24, pp+25, pp+26, pp+27, pp+28, pp+29, pp+30, pp+32, pp+32, pp+33, pp+34, pp+35,
                pp+36, pp+37, pp+38, pp+39, pp+40, pp+41, pp+42, pp+43, pp+44, pp+45, pp+46, pp+47, pp+48, pp+49, pp+50, pp+51, pp+52, pp+53, pp+54), i >= 9) {
             int poly = i/3;
             //vc_assert(i < countof(pp); // may need to increment poly count and pp array
@@ -305,9 +305,9 @@ static int load_wavefront_obj(const char
                *pf++ = pp[3*i+0]; *pf++ = pp[3*i+1]; *pf++ = pp[3*i+2];
                *pf++ = pp[3*(i+1)+0]; *pf++ = pp[3*(i+1)+1]; *pf++ = pp[3*(i+1)+2];
             }
-         } else { printf(s); vc_assert(0); }
+         } else { printf("%s", s); vc_assert(0); }
          break;
-      default: 
+      default:
          printf("%02x %02x %s", s[0], s[1], s); vc_assert(0); break;
       }
 
@@ -345,7 +345,7 @@ static int load_wavefront_dat(const char
 {
    FILE *fp;
    int s;
-   const int size = sizeof *m + 
+   const int size = sizeof *m +
       sizeof(float)*(3+2+3)*MAX_VERTICES +   // 3 vertices + 2 textures + 3 normals
       sizeof(unsigned short)*3*MAX_VERTICES; //each face has 9 vertices
 
@@ -371,7 +371,7 @@ MODEL_T load_wavefront(const char *model
    if (!model || !modelname) return NULL;
    memset (model, 0, sizeof *model);
    model->texture = 0; //load_texture(texturename);
-   m = allocbuffer(sizeof *m + 
+   m = allocbuffer(sizeof *m +
       sizeof(float)*(3+2+3)*MAX_VERTICES +    // 3 vertices + 2 textures + 3 normals
       sizeof(unsigned short)*3*MAX_VERTICES); //each face has 9 vertices
    if (!m) return 0;
@@ -391,7 +391,7 @@ MODEL_T load_wavefront(const char *model
       #ifdef DUMP_OBJ_DAT
       strcpy(modelname_obj, modelname);
       strcat(modelname_obj, ".dat");
-      size = sizeof *m + 
+      size = sizeof *m +
          sizeof(float)*(3*m->numv+2*m->numt+3*m->numn) +  // 3 vertices + 2 textures + 3 normals
          sizeof(unsigned short)*3*m->numf;                //each face has 9 vertices
       fp = host_file_open(modelname_obj, "w");
@@ -418,10 +418,10 @@ MODEL_T load_wavefront(const char *model
       // vertex, texture, normal
       deindex(temp, qv, qf+3*offset+0, 3, mat->numverts);
       create_vbo(GL_ARRAY_BUFFER, mat->vbo+VBO_VERTEX, 3 * mat->numverts * sizeof *qv, temp); // 3
-   
+
       deindex(temp, qt, qf+3*offset+1, 2, mat->numverts);
       create_vbo(GL_ARRAY_BUFFER, mat->vbo+VBO_TEXTURE, 2 * mat->numverts * sizeof *qt, temp); // 2
-   
+
       deindex(temp, qn, qf+3*offset+2, 3, mat->numverts);
       create_vbo(GL_ARRAY_BUFFER, mat->vbo+VBO_NORMAL, 3 * mat->numverts * sizeof *qn, temp); // 3
       offset += mat->numverts;
@@ -449,7 +449,7 @@ void unload_wavefront(MODEL_T m)
    }
 }
 
-// create a cube model that looks like a wavefront model, 
+// create a cube model that looks like a wavefront model,
 MODEL_T cube_wavefront(void)
 {
    static const float qv[] = {
@@ -462,7 +462,7 @@ MODEL_T cube_wavefront(void)
      0.5f,  0.5f, -0.5f,
     -0.5f,  0.5f, -0.5f,
    };
-   
+
    static const float qn[] = {
      0.0f, -1.0f, -0.0f,
      0.0f,  1.0f, -0.0f,
@@ -471,14 +471,14 @@ MODEL_T cube_wavefront(void)
      0.0f,  0.0f, -1.0f,
     -1.0f,  0.0f, -0.0f,
    };
-   
+
    static const float qt[] = {
     1.0f, 0.0f,
     1.0f, 1.0f,
     0.0f, 1.0f,
     0.0f, 0.0f,
    };
-   
+
    static const unsigned short qf[] = {
     1,1,1, 2,2,1, 3,3,1,
     3,3,1, 4,4,1, 1,1,1,
